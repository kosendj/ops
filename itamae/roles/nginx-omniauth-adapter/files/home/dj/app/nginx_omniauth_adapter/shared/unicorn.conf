# vim: ft=ruby
worker_processes 4

listen "/tmp/unicorn-nginx_omniauth_adapter.sock", :backlog => 64

timeout 30

pid "/tmp/unicorn-nginx_omniauth_adapter.pid"

stderr_path "/tmp/unicorn-nginx_omniauth_adapter.stderr.log"
stdout_path "/tmp/unicorn-nginx_omniauth_adapter.stdout.log"

preload_app true
GC.respond_to?(:copy_on_write_friendly=) and
  GC.copy_on_write_friendly = true

check_client_connection false

run_once = true

before_exec do |server|
  if ENV['NGX_OMNIAUTH_ENVSH']
    newenv = IO.popen([ENV['NGX_OMNIAUTH_ENVSH'], 'env', '-0', unsetenv_others: true], 'r', &:read)
    ignore = ['PWD', 'SHLVL', '_']

    newenv.split(?\0).map {|_| _.split(?=, 2) }.each do |(k, v)|
      next if ignore.include?(k)
      ENV[k] = v
    end

    puts "Updated environment $NGX_OMNIAUTH_ENVVER=#{ENV['NGX_OMNIAUTH_ENVVER']}"
  end
end

before_fork do |server, worker|
  defined?(ActiveRecord::Base) and
    ActiveRecord::Base.connection.disconnect!

  if run_once
    run_once = false
  end

  old_pid = "#{server.config[:pid]}.oldbin"
  if old_pid != server.pid
    begin
      sig = (worker.nr + 1) >= server.worker_processes ? :QUIT : :TTOU
      Process.kill(sig, File.read(old_pid).to_i)
    rescue Errno::ENOENT, Errno::ESRCH
    end
  end
end

after_fork do |server, worker|
  defined?(ActiveRecord::Base) and
    ActiveRecord::Base.establish_connection
end
